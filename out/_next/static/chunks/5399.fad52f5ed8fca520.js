"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[5399],{46659:function(t,r,e){e.d(r,{S:function(){return n}});var a=e(17249),s=e(10706);class n{get chainId(){return this._chainId}constructor(t,r,e){(0,a._)(this,"contractWrapper",void 0),(0,a._)(this,"storage",void 0),(0,a._)(this,"erc721",void 0),(0,a._)(this,"_chainId",void 0),(0,a._)(this,"transfer",(0,s.cZ)(async(t,r)=>this.erc721.transfer.prepare(t,r))),(0,a._)(this,"setApprovalForAll",(0,s.cZ)(async(t,r)=>this.erc721.setApprovalForAll.prepare(t,r))),(0,a._)(this,"setApprovalForToken",(0,s.cZ)(async(t,r)=>s.aV.fromContractWrapper({contractWrapper:this.contractWrapper,method:"approve",args:[await (0,s.cj)(t),r]}))),this.contractWrapper=t,this.storage=r,this.erc721=new s.au(this.contractWrapper,this.storage,e),this._chainId=e}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async getAll(t){return this.erc721.getAll(t)}async getOwned(t){return t&&(t=await (0,s.cj)(t)),this.erc721.getOwned(t)}async getOwnedTokenIds(t){return t&&(t=await (0,s.cj)(t)),this.erc721.getOwnedTokenIds(t)}async totalSupply(){return this.erc721.totalCirculatingSupply()}async get(t){return this.erc721.get(t)}async ownerOf(t){return this.erc721.ownerOf(t)}async balanceOf(t){return this.erc721.balanceOf(t)}async balance(){return this.erc721.balance()}async isApproved(t,r){return this.erc721.isApproved(t,r)}}},25704:function(t,r,e){e.d(r,{h:function(){return n}});var a=e(10706),s=e(49242);async function n(t,r,e){let n=t.getProvider(),o=new a.d6(n,r,s,{}),c=await t.getSignerAddress(),i=t.readContract.address,d=await o.readContract.allowance(c,i);return d.gte(e)}},45399:function(t,r,e){e.r(r),e.d(r,{Multiwrap:function(){return i}});var a=e(17249),s=e(10706),n=e(46659),o=e(61744),c=e(25704);e(13550),e(2162),e(64063),e(62822),e(71770),e(54098);class i extends n.S{constructor(t,r,e){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},o=arguments.length>4?arguments[4]:void 0,c=arguments.length>5?arguments[5]:void 0,d=arguments.length>6&&void 0!==arguments[6]?arguments[6]:new s.d6(t,r,o,n);super(d,e,c),(0,a._)(this,"abi",void 0),(0,a._)(this,"encoder",void 0),(0,a._)(this,"estimator",void 0),(0,a._)(this,"metadata",void 0),(0,a._)(this,"app",void 0),(0,a._)(this,"events",void 0),(0,a._)(this,"roles",void 0),(0,a._)(this,"royalties",void 0),(0,a._)(this,"owner",void 0),(0,a._)(this,"wrap",(0,s.cZ)(async(t,r,e)=>{let a=await (0,s.dm)(r,this.storage),n=await (0,s.cj)(e||await this.contractWrapper.getSignerAddress()),o=await this.toTokenStructList(t);return s.aV.fromContractWrapper({contractWrapper:this.contractWrapper,method:"wrap",args:[o,a,n],parse:t=>{let r=this.contractWrapper.parseLogs("TokensWrapped",t?.logs);if(0===r.length)throw Error("TokensWrapped event not found");let e=r[0].args.tokenIdOfWrappedToken;return{id:e,receipt:t,data:()=>this.get(e)}}})})),(0,a._)(this,"unwrap",(0,s.cZ)(async(t,r)=>{let e=await (0,s.cj)(r||await this.contractWrapper.getSignerAddress());return s.aV.fromContractWrapper({contractWrapper:this.contractWrapper,method:"unwrap",args:[t,e]})})),this.abi=s.e.parse(o||[]),this.metadata=new s.ag(this.contractWrapper,s.dl,this.storage),this.app=new s.a$(this.contractWrapper,this.metadata,this.storage),this.roles=new s.ah(this.contractWrapper,i.contractRoles),this.encoder=new s.af(this.contractWrapper),this.estimator=new s.aP(this.contractWrapper),this.events=new s.aQ(this.contractWrapper),this.royalties=new s.ai(this.contractWrapper,this.metadata),this.owner=new s.aU(this.contractWrapper)}async getWrappedContents(t){let r=await this.contractWrapper.readContract.getWrappedContents(t),e=[],a=[],n=[];for(let c of r)switch(c.tokenType){case 0:{let i=await (0,s.b5)(this.contractWrapper.getProvider(),c.assetContract);e.push({contractAddress:c.assetContract,quantity:o.formatUnits(c.totalAmount,i.decimals)});break}case 1:a.push({contractAddress:c.assetContract,tokenId:c.tokenId});break;case 2:n.push({contractAddress:c.assetContract,tokenId:c.tokenId,quantity:c.totalAmount.toString()})}return{erc20Tokens:e,erc721Tokens:a,erc1155Tokens:n}}async toTokenStructList(t){let r=[],e=this.contractWrapper.getProvider(),a=await this.contractWrapper.getSignerAddress();if(t.erc20Tokens)for(let n of t.erc20Tokens){let o=await (0,s.b4)(e,n.quantity,n.contractAddress),i=await (0,c.h)(this.contractWrapper,n.contractAddress,o);if(!i)throw Error(`ERC20 token with contract address "${n.contractAddress}" does not have enough allowance to transfer.

You can set allowance to the multiwrap contract to transfer these tokens by running:

await sdk.getToken("${n.contractAddress}").setAllowance("${this.getAddress()}", ${n.quantity});

`);r.push({assetContract:n.contractAddress,totalAmount:o,tokenId:0,tokenType:0})}if(t.erc721Tokens)for(let d of t.erc721Tokens){let p=await (0,s.d0)(this.contractWrapper.getProvider(),this.getAddress(),d.contractAddress,d.tokenId,a);if(!p)throw Error(`ERC721 token "${d.tokenId}" with contract address "${d.contractAddress}" is not approved for transfer.

You can give approval the multiwrap contract to transfer this token by running:

await sdk.getNFTCollection("${d.contractAddress}").setApprovalForToken("${this.getAddress()}", ${d.tokenId});

`);r.push({assetContract:d.contractAddress,totalAmount:0,tokenId:d.tokenId,tokenType:1})}if(t.erc1155Tokens)for(let h of t.erc1155Tokens){let l=await (0,s.d0)(this.contractWrapper.getProvider(),this.getAddress(),h.contractAddress,h.tokenId,a);if(!l)throw Error(`ERC1155 token "${h.tokenId}" with contract address "${h.contractAddress}" is not approved for transfer.

You can give approval the multiwrap contract to transfer this token by running:

await sdk.getEdition("${h.contractAddress}").setApprovalForAll("${this.getAddress()}", true);

`);r.push({assetContract:h.contractAddress,totalAmount:h.quantity,tokenId:h.tokenId,tokenType:2})}return r}async prepare(t,r,e){return s.aV.fromContractWrapper({contractWrapper:this.contractWrapper,method:t,args:r,overrides:e})}async call(t,r,e){return this.contractWrapper.call(t,r,e)}}(0,a._)(i,"contractRoles",["admin","transfer","minter","unwrap","asset"])}}]);
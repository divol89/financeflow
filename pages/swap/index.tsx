// import type { NextPage } from 'next';
// import dynamic from 'next/dynamic';
// import { LoadingIndicator } from '../../components/LoadingIndicator';

// export const LiFiWidgetNext = dynamic(
//   () => import('../../components/Widget').then((module) => module.Widget) as any,
//   {
//     ssr: false,
//     loading: () => <LoadingIndicator />,
//   },
// );

// const Home: NextPage = () => {
//   return <LiFiWidgetNext />;
// };

// export default Home;




// import { NextPage } from 'next';
// import dynamic from 'next/dynamic';
// import { LoadingIndicator } from '../../components/LoadingIndicator';

// import React, { useEffect, useRef, useState } from 'react';
// import Head from "next/head";

// import { QueryClient, QueryClientProvider } from 'react-query';

// const queryClient = new QueryClient();

// const LiFiWidgetNext = dynamic(
//   () => import('../../components/Widget').then((module) => module.Widget) as any,
//   {
//     ssr: false,
//     loading: () => <LoadingIndicator />,
//   },
// );

// const Home: NextPage = () => {
//   const sectionRef = useRef<HTMLDivElement>(null);

//   const [isVisible, setIsVisible] = useState(false);
//   const [selectedPoolAddress, setSelectedPoolAddress] = useState(null);

//   useEffect(() => {
//     const handleScroll = () => {
//       if (sectionRef.current) {
//         const topPosition = sectionRef.current.getBoundingClientRect().top;
//         const bottomPosition = sectionRef.current.getBoundingClientRect().bottom;
//         const isVisible = topPosition < window.innerHeight && bottomPosition > 0;
//         setIsVisible(isVisible);
//       }
//     };

//     const handleResize = () => {
//       handleScroll();
//     };

//     window.addEventListener('scroll', handleScroll);
//     window.addEventListener('resize', handleResize);

//     handleScroll();

//     return () => {
//       window.removeEventListener('scroll', handleScroll);
//       window.removeEventListener('resize', handleResize);
//     };
//   }, []);

//   return (
//     <QueryClientProvider client={queryClient}>
//       <section
//         ref={sectionRef}
//         className={`w-full h-full gradient-bg-welcome fade-out-scroll${isVisible ? ' visible' : ''}`}
//       >
//         <div className="w-full h-full max-w-screen-sm flex flex-col justify-between">
//           <div className="transform scale-80 sm:scale-100" >
//             <Head>
//               <title>FlowFinance</title>
//               <meta name="description" content="Generated by create next app" />
//               <link rel="icon" href="/favicon.ico" />
//             </Head>
//             <header>
//             </header>
//             <main>
             
//             </main>
//           </div>
//           <div className="mt-10">
//             <div className="transform scale-75 sm:scale-100" style={{ transformOrigin: 'bottom' }}>
//               <LiFiWidgetNext />
//             </div>
//           </div>
//         </div>
//       </section>
//     </QueryClientProvider>
//   );
// };

// export default Home;


// import { NextPage } from 'next';
// import dynamic from 'next/dynamic';
// import { LoadingIndicator } from './widgetcomponents/LoadingIndicator';
// import WidgetNavbar from './widgetcomponents/WidgetNavbar';
// import ErrorBoundary from './widgetcomponents/ErrorBoundary';  // AsegÃºrate de usar la ruta correcta

// import React, { useRef, useState } from 'react';
// import Head from 'next/head';

// const LiFiWidgetNext = dynamic(
//   () => import('./widgetcomponents/Widget').then((module) => module.Widget) as any,
//   {
//     ssr: false,
//     loading: () => <LoadingIndicator />,
//   },
// );

// const Home: NextPage = () => {
//   const sectionRef = useRef<HTMLDivElement>(null);
//   const [isVisible] = useState(true); // Establecer isVisible en true para que el widget sea visible por defecto

//   return (
//     <section ref={sectionRef} className="w-full bg-gradient-to-t from-black to-gray-400 min-h-screen bg-cover bg-center absolute top-0 left-0 z-0">
//       <div className="max-w-screen-lg w-full mx-auto">
//         <div className="transform scale-80 sm:scale-100">
//           <Head>
//             <title>FlowSwap</title>
//             <meta name="FlowSwap Dex" content="LI.FI powered widget Dex" />
//             <link rel="icon" href="/favicon.ico" />
//           </Head>
//         <header>
//             <WidgetNavbar/>
//                 </header>
//         </div>
//         <div className="mb-0">
//           <div className="transform scale-75 sm:scale-95" >
//           {isVisible && (
//               <ErrorBoundary>
//                 <LiFiWidgetNext />
//               </ErrorBoundary>
//             )}
//           </div>
//         </div>
//       </div>
//     </section>
//     );
// };



// export default Home;


// import { NextPage } from 'next';
// import dynamic from 'next/dynamic';
// import { LoadingIndicator } from './widgetcomponents/LoadingIndicator';
// import WidgetNavbar from './widgetcomponents/WidgetNavbar';
// import React, { useRef, useState, useEffect } from 'react';
// import Head from 'next/head';

// const LiFiWidgetNext = dynamic(
//   () => import('./widgetcomponents/Widget').then((module) => module.Widget) as any,
//   {
//     ssr: false,
//     loading: () => <LoadingIndicator />,
//   },
// );

// const Home: NextPage = () => {
//   const sectionRef = useRef<HTMLDivElement>(null);
//   const [isVisible] = useState(true);

//   useEffect(() => {
//     const originalErrorHandler = window.onerror;

//     window.onerror = function (message, source, lineno, colno, error) {
//   if (typeof message === 'string' && message.includes('Connection request reset. Please try again.')) {
//     alert("Por favor, conecta tu wallet.");
//     return true; // Evita mostrar el mensaje de error original
//   }
// };


//     return () => {
//       window.onerror = originalErrorHandler; // Restaura el manejador de errores original al desmontar
//     };
//   }, []);

//   return (
//     <section ref={sectionRef} className="w-full bg-gradient-to-t from-black to-gray-400 min-h-screen bg-cover bg-center absolute top-0 left-0 z-0">
//       <div className="max-w-screen-lg w-full mx-auto">
//         <div className="transform scale-80 sm:scale-100">
//           <Head>
//             <title>FlowSwap</title>
//             <meta name="FlowSwap Dex" content="LI.FI powered widget Dex" />
//             <link rel="icon" href="/favicon.ico" />
//           </Head>
//           <header>
//             <WidgetNavbar />
//           </header>
//         </div>
//         <div className="mb-0">
//           <div className="transform scale-75 sm:scale-95">
//             {isVisible && <LiFiWidgetNext />}
//           </div>
//         </div>
//       </div>
//     </section>
//   );
// };



// export default Home;


import { NextPage } from 'next';
import dynamic from 'next/dynamic';
import { LoadingIndicator } from '../../components/widgetcomponents/LoadingIndicator';
import WidgetNavbar from '../../components/widgetcomponents/WidgetNavbar';

import React, { useRef, useState } from 'react';
import Head from 'next/head';

import { QueryClient, QueryClientProvider } from 'react-query';

const queryClient = new QueryClient();

const LiFiWidgetNext = dynamic(
  () => import('../../components/widgetcomponents/Widget').then((module) => module.Widget) as any,
  {
    ssr: false,
    loading: () => <LoadingIndicator />,
  },
);

const Home: NextPage = () => {
  const sectionRef = useRef<HTMLDivElement>(null);
  const [isVisible] = useState(true); // Establecer isVisible en true para que el widget sea visible por defecto

  return (
    <QueryClientProvider client={queryClient}>
      <section ref={sectionRef} className="w-full bg-gradient-to-t from-black to-gray-400 min-h-screen bg-cover bg-center absolute top-0 left-0 z-0">
        <div className="max-w-screen-lg w-full mx-auto">
          <div className="transform scale-80 sm:scale-100">
            <Head>
              <title>FlowSwap</title>
              <meta name="FlowSwap Dex" content="LI.FI powered widget Dex" />
              <link rel="icon" href="/favicon.ico" />
            </Head>
            <header>
            <WidgetNavbar/>
           {/* ... */}
           </header>
            <main>{/* ... */}</main>
          </div>
          
          <div className="mb-0">
             <div className="transform scale-75 sm:scale-95" >
              {isVisible && <LiFiWidgetNext />}
              </div>
          </div>
        </div>
      </section>
    </QueryClientProvider>
  );
};

export default Home;
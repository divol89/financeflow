Skip to content
wagmi logo
Main Navigation
React
Vue
Core
CLI

More

Sidebar Navigation
Introduction
Why Wagmi

Installation

Getting Started

TypeScript

Comparisons

Guides
TanStack Query

Viem

Error Handling

Ethers.js Adapters

Chain Properties

SSR

Connect Wallet

Send Transaction

Read from Contract

Write to Contract

FAQ / Troubleshooting

Migrate from v1 to v2

Configuration
createConfig

createStorage

Chains

Connectors
Transports
WagmiProvider

Hooks
useAccount

useAccountEffect

useBalance

useBlockNumber

useBlock

useBlockTransactionCount

useBytecode

useCall

useChainId

useChains

useClient

useConfig

useConnect

useConnections

useConnectorClient

useConnectors

useDeployContract

useDisconnect

useEnsAddress

useEnsAvatar

useEnsName

useEnsResolver

useEnsText

useFeeHistory

useProof

usePublicClient

useEstimateFeesPerGas

useEstimateGas

useEstimateMaxPriorityFeePerGas

useGasPrice

useInfiniteReadContracts

useReadContract

usePrepareTransactionRequest

useReadContracts

useReconnect

useSendTransaction

useSignMessage

useSignTypedData

useSimulateContract

useStorageAt

useSwitchAccount

useSwitchChain

useTransaction

useTransactionConfirmations

useTransactionCount

useTransactionReceipt

useToken

useWaitForTransactionReceipt

useVerifyMessage

useVerifyTypedData

useWalletClient

useWatchAsset

useWatchBlocks

useWatchBlockNumber

useWatchContractEvent

useWatchPendingTransactions

useWriteContract

Miscellaneous
Actions

Errors

Utilities
Experimental
useCallsStatus

useCapabilities

useSendCalls

useShowCallsStatus

useWriteContracts

On this page
Import
Usage
Parameters
abi
account
address
args
blockNumber
blockTag
chainId
config
functionName
scopeKey
query
Return Type
data
dataUpdatedAt
error
errorUpdatedAt
errorUpdateCount
failureCount
failureReason
fetchStatus
isError / isPending / isSuccess
isFetched
isFetchedAfterMount
isFetching / isPaused
isLoading
isLoadingError
isPlaceholderData
isRefetchError
isRefetching
isStale
refetch
status
Type Inference
TanStack Query
Action
ParadigmParadigm
StripeStripe
zkSynczkSync
BraveBrave
LineaLinea
useReadContract
Hook for calling a read-only function on a contract, and returning the response.

A read-only function (constant function) on a Solidity contract is denoted by a pure or view keyword. They can only read the state of the contract, and cannot make any changes to it. Since read-only methods do not change the state of the contract, they do not require any gas to be executed, and can be called by any user without the need to pay for gas.

Import
ts
import { useReadContract } from 'wagmi'
Usage

index.tsx

abi.ts

config.ts
tsx
import { useReadContract } from 'wagmi'
import { abi } from './abi'

function App() {
  const result = useReadContract({
    abi,
    address: '0x6b175474e89094c44da98b954eedeac495271d0f',
    functionName: 'totalSupply',
  })
}
Parameters
ts
import { type UseReadContractParameters } from 'wagmi'
abi
Abi | undefined

The contract's ABI. Check out the TypeScript docs for how to set up ABIs for maximum type inference and safety.


index.tsx

abi.ts

config.ts
tsx
import { useReadContract } from 'wagmi'
import { abi } from './abi'

function App() {
  const result = useReadContract({
    abi,
    address: '0x6b175474e89094c44da98b954eedeac495271d0f',
    functionName: 'totalSupply',
  })
}
account
Account | undefined

Account to use when calling the contract (msg.sender).


index.tsx

abi.ts

config.ts
tsx
import { useReadContract } from 'wagmi'
import { abi } from './abi'

function App() {
  const result = useReadContract({
    abi,
    address: '0x6b175474e89094c44da98b954eedeac495271d0f',
    functionName: 'balanceOf',
    args: ['0x6b175474e89094c44da98b954eedeac495271d0f'],
    account: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
  })
}
address
Address | undefined

The contract's address.


index.tsx

abi.ts

config.ts
tsx
import { useReadContract } from 'wagmi'
import { abi } from './abi'

function App() {
  const result = useReadContract({
    abi,
    address: '0x6b175474e89094c44da98b954eedeac495271d0f',
    functionName: 'totalSupply',
  })
}
args
readonly unknown[] | undefined

Arguments to pass when calling the contract.
Inferred from abi and functionName.

index.tsx

abi.ts

config.ts
tsx
import { useReadContract } from 'wagmi'
import { abi } from './abi'

function App() {
  const result = useReadContract({
    abi,
    address: '0x6b175474e89094c44da98b954eedeac495271d0f',
    functionName: 'balanceOf',
    args: ['0x6b175474e89094c44da98b954eedeac495271d0f'],
  })
}
blockNumber
bigint | undefined

Block number to call contract at.


index.tsx

abi.ts

config.ts
tsx
import { useReadContract } from 'wagmi'
import { abi } from './abi'

function App() {
  const result = useReadContract({
    abi,
    address: '0x6b175474e89094c44da98b954eedeac495271d0f',
    functionName: 'totalSupply',
    blockNumber: 17829139n,
  })
}
blockTag
'latest' | 'earliest' | 'pending' | 'safe' | 'finalized' | undefined

Block tag to call contract at.


index.tsx

abi.ts

config.ts
tsx
import { useReadContract } from 'wagmi'
import { abi } from './abi'

function App() {
  const result = useReadContract({
    abi,
    address: '0x6b175474e89094c44da98b954eedeac495271d0f',
    functionName: 'totalSupply',
    blockTag: 'safe',
  })
}
chainId
config['chains'][number]['id'] | undefined

ID of chain to use when fetching data.


index.tsx

abi.ts

config.ts
tsx
import { useReadContract } from 'wagmi'
import { mainnet } from 'wagmi/chains'
import { abi } from './abi'

function App() {
  const result = useReadContract({
    abi,
    address: '0x6b175474e89094c44da98b954eedeac495271d0f',
    functionName: 'totalSupply',
    chainId: mainnet.id,
  })
}
config
Config | undefined

Config to use instead of retrieving from the from nearest WagmiProvider.


index.tsx

abi.ts

config.ts
tsx
import { useReadContract } from 'wagmi'
import { abi } from './abi'
import { config } from './config'

function App() {
  const result = useReadContract({
    abi,
    address: '0x6b175474e89094c44da98b954eedeac495271d0f',
    functionName: 'totalSupply',
    config,
  })
}
functionName
string | undefined

Function to call on the contract.
Inferred from abi.

index.tsx

abi.ts

config.ts
tsx
import { useReadContract } from 'wagmi'
import { abi } from './abi'

function App() {
  const result = useReadContract({
    abi,
    address: '0x6b175474e89094c44da98b954eedeac495271d0f',
    functionName: 'balanceOf',
    args: ['0x6b175474e89094c44da98b954eedeac495271d0f'],
  })
}
scopeKey
string | undefined

Scopes the cache to a given context. Hooks that have identical context will share the same cache.


index.tsx

abi.ts

config.ts
tsx
import { useReadContract } from 'wagmi'
import { abi } from './abi'

function App() {
  const result = useReadContract({
    abi,
    address: '0x6b175474e89094c44da98b954eedeac495271d0f',
    functionName: 'balanceOf',
    args: ['0x6b175474e89094c44da98b954eedeac495271d0f'],
    scopeKey: 'foo',
  })
}

query
TanStack Query parameters. See the TanStack Query query docs for more info.

Wagmi does not support passing all TanStack Query parameters

TanStack Query parameters, like queryFn and queryKey, are used internally to make Wagmi work and you cannot override them. Check out the source to see what parameters are not supported. All parameters listed below are supported.

enabled
boolean | undefined

Set this to false to disable this query from automatically running.
Can be used for Dependent Queries.
gcTime
number | Infinity | undefined

Defaults to 5 * 60 * 1000 (5 minutes) or Infinity during SSR
The time in milliseconds that unused/inactive cache data remains in memory. When a query's cache becomes unused or inactive, that cache data will be garbage collected after this duration. When different garbage collection times are specified, the longest one will be used.
If set to Infinity, will disable garbage collection
initialData
ReadContractReturnType | (() => ReadContractReturnType) | undefined

If set, this value will be used as the initial data for the query cache (as long as the query hasn't been created or cached yet)
If set to a function, the function will be called once during the shared/root query initialization, and be expected to synchronously return the initialData
Initial data is considered stale by default unless a staleTime has been set.
initialData is persisted to the cache
initialDataUpdatedAt
number | ((() => number | undefined)) | undefined

If set, this value will be used as the time (in milliseconds) of when the initialData itself was last updated.

meta
Record<string, unknown> | undefined

If set, stores additional information on the query cache entry that can be used as needed. It will be accessible wherever the query is available, and is also part of the QueryFunctionContext provided to the queryFn.

networkMode
online' | 'always' | 'offlineFirst' | undefined

Defaults to 'online'
see Network Mode for more information.
notifyOnChangeProps
string[] | 'all' | (() => string[] | 'all') | undefined

If set, the component will only re-render if any of the listed properties change.
If set to ['data', 'error'] for example, the component will only re-render when the data or error properties change.
If set to 'all', the component will opt-out of smart tracking and re-render whenever a query is updated.
If set to a function, the function will be executed to compute the list of properties.
By default, access to properties will be tracked, and the component will only re-render when one of the tracked properties change.
placeholderData
ReadContractReturnType | ((previousValue: ReadContractReturnType | undefined; previousQuery: Query | undefined) => ReadContractReturnType) | undefined

If set, this value will be used as the placeholder data for this particular query observer while the query is still in the pending state.
placeholderData is not persisted to the cache
If you provide a function for placeholderData, as a first argument you will receive previously watched query data if available, and the second argument will be the complete previousQuery instance.
queryClient
QueryClient | undefined

Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.

refetchInterval
number | false | ((data: ReadContractReturnType | undefined, query: Query) => number | false | undefined) | undefined

If set to a number, all queries will continuously refetch at this frequency in milliseconds
If set to a function, the function will be executed with the latest data and query to compute a frequency
refetchIntervalInBackground
boolean | undefined

If set to true, queries that are set to continuously refetch with a refetchInterval will continue to refetch while their tab/window is in the background

refetchOnMount
boolean | 'always' | ((query: Query) => boolean | 'always') | undefined

Defaults to true
If set to true, the query will refetch on mount if the data is stale.
If set to false, the query will not refetch on mount.
If set to 'always', the query will always refetch on mount.
If set to a function, the function will be executed with the query to compute the value
refetchOnReconnect
boolean | 'always' | ((query: Query) => boolean | 'always') | undefined

Defaults to true
If set to true, the query will refetch on reconnect if the data is stale.
If set to false, the query will not refetch on reconnect.
If set to 'always', the query will always refetch on reconnect.
If set to a function, the function will be executed with the query to compute the value
refetchOnWindowFocus
boolean | 'always' | ((query: Query) => boolean | 'always') | undefined

Defaults to true
If set to true, the query will refetch on window focus if the data is stale.
If set to false, the query will not refetch on window focus.
If set to 'always', the query will always refetch on window focus.
If set to a function, the function will be executed with the query to compute the value
retry
boolean | number | ((failureCount: number, error: ReadContractErrorType) => boolean) | undefined

If false, failed queries will not retry by default.
If true, failed queries will retry infinitely.
If set to a number, e.g. 3, failed queries will retry until the failed query count meets that number.
Defaults to 3 on the client and 0 on the server
retryDelay
number | ((retryAttempt: number, error: ReadContractErrorType) => number) | undefined

This function receives a retryAttempt integer and the actual Error and returns the delay to apply before the next attempt in milliseconds.
A function like attempt => Math.min(attempt > 1 ? 2 ** attempt * 1000 : 1000, 30 * 1000) applies exponential backoff.
A function like attempt => attempt * 1000 applies linear backoff.
retryOnMount
boolean | undefined

If set to false, the query will not be retried on mount if it contains an error. Defaults to true.

select
((data: ReadContractReturnType) => unknown) | undefined

This option can be used to transform or select a part of the data returned by the query function. It affects the returned data value, but does not affect what gets stored in the query cache.

staleTime
number | Infinity | undefined

Defaults to 0
The time in milliseconds after data is considered stale. This value only applies to the hook it is defined on.
If set to Infinity, the data will never be considered stale
structuralSharing
boolean | (((oldData: ReadContractReturnType | undefined, newData: ReadContractReturnType) => ReadContractReturnType)) | undefined

Defaults to true
If set to false, structural sharing between query results will be disabled.
If set to a function, the old and new data values will be passed through this function, which should combine them into resolved data for the query. This way, you can retain references from the old data to improve performance even when that data contains non-serializable values.
Return Type
ts
import { type UseReadContractReturnType } from 'wagmi'
The return type's data property is inferrable via the combination of abi, functionName, and args. Check out the TypeScript docs for more info.


TanStack Query query docs

data
ReadContractReturnType

The last successfully resolved data for the query.
Defaults to undefined.
dataUpdatedAt
number

The timestamp for when the query most recently returned the status as 'success'.

error
null | ReadContractErrorType

The error object for the query, if an error was thrown.
Defaults to null
errorUpdatedAt
number

The timestamp for when the query most recently returned the status as 'error'.

errorUpdateCount
number

The sum of all errors.

failureCount
number

The failure count for the query.
Incremented every time the query fails.
Reset to 0 when the query succeeds.
failureReason
null | ReadContractErrorType

The failure reason for the query retry.
Reset to null when the query succeeds.
fetchStatus
'fetching' | 'idle' | 'paused'

fetching Is true whenever the queryFn is executing, which includes initial pending as well as background refetches.
paused The query wanted to fetch, but has been paused.
idle The query is not fetching.
See Network Mode for more information.
isError / isPending / isSuccess
boolean

Boolean variables derived from status.

isFetched
boolean

Will be true if the query has been fetched.

isFetchedAfterMount
boolean

Will be true if the query has been fetched after the component mounted.
This property can be used to not show any previously cached data.
isFetching / isPaused
boolean

Boolean variables derived from fetchStatus.

isLoading
boolean

Is true whenever the first fetch for a query is in-flight
Is the same as isFetching && isPending
isLoadingError
boolean

Will be true if the query failed while fetching for the first time.

isPlaceholderData
boolean

Will be true if the data shown is the placeholder data.

isRefetchError
boolean

Will be true if the query failed while refetching.

isRefetching
boolean

Is true whenever a background refetch is in-flight, which does not include initial 'pending'.
Is the same as isFetching && !isPending
isStale
boolean

Will be true if the data in the cache is invalidated or if the data is older than the given staleTime.

refetch
(options: { cancelRefetch?: boolean | undefined; throwOnError?: boolean | undefined }) => Promise<UseQueryResult<ReadContractReturnType, ReadContractErrorType>>

A function to manually refetch the query.
throwOnError
When set to true, an error will be thrown if the query fails.
When set to false, an error will be logged if the query fails.
cancelRefetch
When set to true, a currently running request will be cancelled before a new request is made.
When set to false, no refetch will be made if there is already a request running.
Defaults to true
status
'error' | 'pending' | 'success'

pending if there's no cached data and no query attempt was finished yet.
error if the query attempt resulted in an error. The corresponding error property has the error received from the attempted fetch
success if the query has received a response with no errors and is ready to display its data. The corresponding data property on the query is the data received from the successful fetch or if the query's enabled property is set to false and has not been fetched yet data is the first initialData supplied to the query on initialization.
Type Inference
With abi setup correctly, TypeScript will infer the correct types for functionName, args, and the return type. See the Wagmi TypeScript docs for more information.


Inline

Const-Asserted
ts
const result = useReadContract({
  abi: [
    {
      type: 'function',
      name: 'balanceOf',
      stateMutability: 'view',
      inputs: [{ name: 'account', type: 'address' }],
      outputs: [{ type: 'uint256' }],
    },
    {
      type: 'function',
      name: 'totalSupply',
      stateMutability: 'view',
      inputs: [],
      outputs: [{ name: 'supply', type: 'uint256' }],
    },
  ],
  address: '0x6b175474e89094c44da98b954eedeac495271d0f',
  functionName: 'balanceOf',


  args: ['0x6b175474e89094c44da98b954eedeac495271d0f'],
})

result.data
TanStack Query
ts
import {
  type ReadContractData,
  type ReadContractOptions,
  type ReadContractQueryFnData,
  type ReadContractQueryKey,
  readContractQueryKey,
  readContractQueryOptions,
} from 'wagmi/query'
Action
readContract
Suggest changes to this page
Last updated: 20/8/24, 0:02

Pager
Previous page
useInfiniteReadContracts



Hooks
Hooks are functions that will help you control the modal, subscribe to wallet events and interact with them and smart contracts.

useWeb3Modal
Control the modal with the useWeb3Modal hook

Wagmi
Ethers
Ethers v5
Solana
import { useWeb3Modal } from '@web3modal/ethers5/react'

export default function Component() {
  const { open, close } = useWeb3Modal()

  open()

  //...
}

You can also select the modal's view when calling the open function

open({ view: 'Account' })

List of views you can select

Variable	Description
Connect	Principal view of the modal - default view when disconnected
Account	User profile - default view when connected
AllWallets	Shows the list of all available wallets
Networks	List of available networks - you can select and target a specific network before connecting
WhatIsANetwork	"What is a network" onboarding view
WhatIsAWallet	"What is a wallet" onboarding view
OnRampProviders	"On-Ramp main view
useDisconnect
const { disconnect } = useDisconnect()

disconnect()

useWalletInfo
Metadata information from the connected wallet

import { useWalletInfo } from '@web3modal/wagmi/react'


export default Component(){
  const { walletInfo } = useWalletInfo()

  console.log(walletInfo.name, walletInfo.icon)

  //...
}

Ethereum Library
Wagmi
Ethers
You can use Wagmi hooks to sign messages, interact with smart contracts, and much more.

useAccount
Hook for accessing account data and connection status.

import { useAccount } from 'wagmi'

function App() {
  const { address, isConnecting, isDisconnected } = useAccount()

  if (isConnecting) return <div>Connecting…</div>
  if (isDisconnected) return <div>Disconnected</div>
  return <div>{address}</div>
}

useSignMessage
Hook for signing messages with connected account.

import { useSignMessage } from 'wagmi'

function App() {
  const { signMessage } = useSignMessage()

  return <button onClick={() => signMessage({ message: 'hello world' })}>Sign message</button>
}

Learn More
useWeb3ModalState
Get the current value of the modal's state

Wagmi
Ethers
Ethers v5
Solana
import { useWeb3ModalState } from '@web3modal/ethers5/react'

const { open, selectedNetworkId } = useWeb3ModalState()

The modal state consists of two reactive values:

State	Description	Type
open	Open state will be true when the modal is open and false when closed.
boolean
selectedNetworkId	The current chain id selected by the user
number
useWeb3ModalTheme
const { themeMode, themeVariables, setThemeMode, setThemeVariables } = useWeb3ModalTheme()

setThemeMode('dark')

setThemeVariables({
  '--w3m-color-mix': '#00BB7F',
  '--w3m-color-mix-strength': 40
})

Track modal events
import { useWeb3ModalEvents } from '@web3modal/wagmi/react'

const events = useWeb3ModalEvents()


// context/Web3Modal.tsx

'use client'

import { createWeb3Modal, defaultConfig } from '@web3modal/ethers5/react'

// Your WalletConnect Cloud project ID
export const projectId = 'xxxxxxxxxxxxxxxxxxxxx'

// 2. Set chains
const mainnet = {
  chainId: 1,
  name: 'Ethereum',
  currency: 'ETH',
  explorerUrl: 'https://etherscan.io',
  rpcUrl: 'https://cloudflare-eth.com'
}

// 3. Create a metadata object
const metadata = {
  name: 'FlowFinance',
  description: 'AppKit Example',
  url: 'https://web3modal.com', // origin must match your domain & subdomain
  icons: ['https://avatars.githubusercontent.com/u/37784886']
}

// 4. Create Ethers config
const ethersConfig = defaultConfig({
  /*Required*/
  metadata,

  /*Optional*/
  enableEIP6963: true, // true by default
  enableInjected: true, // true by default
  enableCoinbase: true, // true by default
  rpcUrl: '...', // used for the Coinbase SDK
  defaultChainId: 1, // used for the Coinbase SDK
})

// 5. Create a Web3Modal instance
createWeb3Modal({
  ethersConfig,
  chains: [mainnet],
  projectId,
  enableAnalytics: true, // Optional - defaults to your Cloud configuration
  enableOnramp: true // Optional - false as default
})

export function Web3Modal({ children }) {
  return children
}

Layout
Next, in your app/layout.tsx or app/layout.jsx file, import the custom Web3Modal component.



// app/layout.tsx

import { Web3Modal } from '../context/Web3Modal'

export const metadata = {
  title: 'FlowFinance',
  description: 'null'
}

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>
        <Web3Modal>{children}</Web3Modal>
      </body>
    </html>
  )
}
